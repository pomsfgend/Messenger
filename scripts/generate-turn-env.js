// scripts/generate-turn-env.js
const fs = require('fs');
const path = require('path');

const turnConfigPath = path.resolve(__dirname, '..', 'turnserver.conf');
const serverConfigPath = path.resolve(__dirname, '..', 'server', 'src', 'turnConfig.ts');
const clientConfigPath = path.resolve(__dirname, '..', 'client', 'src', 'turnConfig.ts');

console.log('--- Generating TURN Server Configurations ---');

if (!fs.existsSync(turnConfigPath)) {
    console.error(`\nüî¥ ERROR: turnserver.conf not found at ${turnConfigPath}`);
    console.error('Please run "npm run setup:turn" first to generate the configuration.');
    process.exit(1);
}

try {
    const turnConfigContent = fs.readFileSync(turnConfigPath, 'utf8');
    const secretMatch = turnConfigContent.match(/static-auth-secret=(.*)/);

    if (!secretMatch || !secretMatch[1]) {
        throw new Error('Could not find static-auth-secret in turnserver.conf');
    }

    const turnSecret = secretMatch[1].trim();

    // --- Create Server Config ---
    const serverConfigFileContent = `// This file is auto-generated by scripts/generate-turn-env.js
// Do not edit this file manually.

export const TURN_SECRET = "${turnSecret}";
`;
    fs.writeFileSync(serverConfigPath, serverConfigFileContent, 'utf8');
    console.log(`‚úÖ Server configuration written to ${serverConfigPath}`);

    // --- Create Client Config ---
    const clientConfigFileContent = `// This file is auto-generated by scripts/generate-turn-env.js
// Do not edit this file manually.

// IMPORTANT: Replace 'yourdomain.com' with the actual public IP address or domain
// of the machine running the Docker container. For local testing, 'localhost'
// might work if the browser and server are on the same machine.
export const turnServerConfig = {
    urls: 'turn:yourdomain.com:3478',
};
`;
    fs.writeFileSync(clientConfigPath, clientConfigFileContent, 'utf8');
    console.log(`‚úÖ Client configuration written to ${clientConfigPath}`);
    console.log("\n‚ö†Ô∏è  ACTION REQUIRED: Please edit the `urls` in `client/src/turnConfig.ts` to point to your server's public IP or domain name.");


    console.log('\n--- ‚úÖ Configuration Generation Complete! ---');

} catch (error) {
    console.error('\n--- üî¥ CONFIGURATION GENERATION FAILED ---');
    console.error(error.message);
    process.exit(1);
}
